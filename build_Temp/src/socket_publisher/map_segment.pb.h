// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_segment.proto

#ifndef PROTOBUF_INCLUDED_map_5fsegment_2eproto
#define PROTOBUF_INCLUDED_map_5fsegment_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fsegment_2eproto 

namespace protobuf_map_5fsegment_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_map_5fsegment_2eproto
namespace map_segment {
class map;
class mapDefaultTypeInternal;
extern mapDefaultTypeInternal _map_default_instance_;
class map_Mat44;
class map_Mat44DefaultTypeInternal;
extern map_Mat44DefaultTypeInternal _map_Mat44_default_instance_;
class map_edge;
class map_edgeDefaultTypeInternal;
extern map_edgeDefaultTypeInternal _map_edge_default_instance_;
class map_keyframe;
class map_keyframeDefaultTypeInternal;
extern map_keyframeDefaultTypeInternal _map_keyframe_default_instance_;
class map_landmark;
class map_landmarkDefaultTypeInternal;
extern map_landmarkDefaultTypeInternal _map_landmark_default_instance_;
class map_msg;
class map_msgDefaultTypeInternal;
extern map_msgDefaultTypeInternal _map_msg_default_instance_;
}  // namespace map_segment
namespace google {
namespace protobuf {
template<> ::map_segment::map* Arena::CreateMaybeMessage<::map_segment::map>(Arena*);
template<> ::map_segment::map_Mat44* Arena::CreateMaybeMessage<::map_segment::map_Mat44>(Arena*);
template<> ::map_segment::map_edge* Arena::CreateMaybeMessage<::map_segment::map_edge>(Arena*);
template<> ::map_segment::map_keyframe* Arena::CreateMaybeMessage<::map_segment::map_keyframe>(Arena*);
template<> ::map_segment::map_landmark* Arena::CreateMaybeMessage<::map_segment::map_landmark>(Arena*);
template<> ::map_segment::map_msg* Arena::CreateMaybeMessage<::map_segment::map_msg>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace map_segment {

// ===================================================================

class map_keyframe : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map_segment.map.keyframe) */ {
 public:
  map_keyframe();
  virtual ~map_keyframe();

  map_keyframe(const map_keyframe& from);

  inline map_keyframe& operator=(const map_keyframe& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  map_keyframe(map_keyframe&& from) noexcept
    : map_keyframe() {
    *this = ::std::move(from);
  }

  inline map_keyframe& operator=(map_keyframe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const map_keyframe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const map_keyframe* internal_default_instance() {
    return reinterpret_cast<const map_keyframe*>(
               &_map_keyframe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(map_keyframe* other);
  friend void swap(map_keyframe& a, map_keyframe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline map_keyframe* New() const final {
    return CreateMaybeMessage<map_keyframe>(NULL);
  }

  map_keyframe* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<map_keyframe>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const map_keyframe& from);
  void MergeFrom(const map_keyframe& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(map_keyframe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .map_segment.map.Mat44 pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  private:
  const ::map_segment::map_Mat44& _internal_pose() const;
  public:
  const ::map_segment::map_Mat44& pose() const;
  ::map_segment::map_Mat44* release_pose();
  ::map_segment::map_Mat44* mutable_pose();
  void set_allocated_pose(::map_segment::map_Mat44* pose);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:map_segment.map.keyframe)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::map_segment::map_Mat44* pose_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_map_5fsegment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class map_edge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map_segment.map.edge) */ {
 public:
  map_edge();
  virtual ~map_edge();

  map_edge(const map_edge& from);

  inline map_edge& operator=(const map_edge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  map_edge(map_edge&& from) noexcept
    : map_edge() {
    *this = ::std::move(from);
  }

  inline map_edge& operator=(map_edge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const map_edge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const map_edge* internal_default_instance() {
    return reinterpret_cast<const map_edge*>(
               &_map_edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(map_edge* other);
  friend void swap(map_edge& a, map_edge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline map_edge* New() const final {
    return CreateMaybeMessage<map_edge>(NULL);
  }

  map_edge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<map_edge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const map_edge& from);
  void MergeFrom(const map_edge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(map_edge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id0 = 1;
  void clear_id0();
  static const int kId0FieldNumber = 1;
  ::google::protobuf::uint32 id0() const;
  void set_id0(::google::protobuf::uint32 value);

  // uint32 id1 = 2;
  void clear_id1();
  static const int kId1FieldNumber = 2;
  ::google::protobuf::uint32 id1() const;
  void set_id1(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:map_segment.map.edge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id0_;
  ::google::protobuf::uint32 id1_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_map_5fsegment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class map_landmark : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map_segment.map.landmark) */ {
 public:
  map_landmark();
  virtual ~map_landmark();

  map_landmark(const map_landmark& from);

  inline map_landmark& operator=(const map_landmark& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  map_landmark(map_landmark&& from) noexcept
    : map_landmark() {
    *this = ::std::move(from);
  }

  inline map_landmark& operator=(map_landmark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const map_landmark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const map_landmark* internal_default_instance() {
    return reinterpret_cast<const map_landmark*>(
               &_map_landmark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(map_landmark* other);
  friend void swap(map_landmark& a, map_landmark& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline map_landmark* New() const final {
    return CreateMaybeMessage<map_landmark>(NULL);
  }

  map_landmark* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<map_landmark>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const map_landmark& from);
  void MergeFrom(const map_landmark& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(map_landmark* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double coords = 2;
  int coords_size() const;
  void clear_coords();
  static const int kCoordsFieldNumber = 2;
  double coords(int index) const;
  void set_coords(int index, double value);
  void add_coords(double value);
  const ::google::protobuf::RepeatedField< double >&
      coords() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_coords();

  // repeated double color = 3;
  int color_size() const;
  void clear_color();
  static const int kColorFieldNumber = 3;
  double color(int index) const;
  void set_color(int index, double value);
  void add_color(double value);
  const ::google::protobuf::RepeatedField< double >&
      color() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_color();

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:map_segment.map.landmark)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > coords_;
  mutable int _coords_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > color_;
  mutable int _color_cached_byte_size_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_map_5fsegment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class map_Mat44 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map_segment.map.Mat44) */ {
 public:
  map_Mat44();
  virtual ~map_Mat44();

  map_Mat44(const map_Mat44& from);

  inline map_Mat44& operator=(const map_Mat44& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  map_Mat44(map_Mat44&& from) noexcept
    : map_Mat44() {
    *this = ::std::move(from);
  }

  inline map_Mat44& operator=(map_Mat44&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const map_Mat44& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const map_Mat44* internal_default_instance() {
    return reinterpret_cast<const map_Mat44*>(
               &_map_Mat44_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(map_Mat44* other);
  friend void swap(map_Mat44& a, map_Mat44& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline map_Mat44* New() const final {
    return CreateMaybeMessage<map_Mat44>(NULL);
  }

  map_Mat44* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<map_Mat44>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const map_Mat44& from);
  void MergeFrom(const map_Mat44& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(map_Mat44* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double pose = 1;
  int pose_size() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  double pose(int index) const;
  void set_pose(int index, double value);
  void add_pose(double value);
  const ::google::protobuf::RepeatedField< double >&
      pose() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pose();

  // @@protoc_insertion_point(class_scope:map_segment.map.Mat44)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > pose_;
  mutable int _pose_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_map_5fsegment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class map_msg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map_segment.map.msg) */ {
 public:
  map_msg();
  virtual ~map_msg();

  map_msg(const map_msg& from);

  inline map_msg& operator=(const map_msg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  map_msg(map_msg&& from) noexcept
    : map_msg() {
    *this = ::std::move(from);
  }

  inline map_msg& operator=(map_msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const map_msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const map_msg* internal_default_instance() {
    return reinterpret_cast<const map_msg*>(
               &_map_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(map_msg* other);
  friend void swap(map_msg& a, map_msg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline map_msg* New() const final {
    return CreateMaybeMessage<map_msg>(NULL);
  }

  map_msg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<map_msg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const map_msg& from);
  void MergeFrom(const map_msg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(map_msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tag = 1;
  void clear_tag();
  static const int kTagFieldNumber = 1;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // string txt = 2;
  void clear_txt();
  static const int kTxtFieldNumber = 2;
  const ::std::string& txt() const;
  void set_txt(const ::std::string& value);
  #if LANG_CXX11
  void set_txt(::std::string&& value);
  #endif
  void set_txt(const char* value);
  void set_txt(const char* value, size_t size);
  ::std::string* mutable_txt();
  ::std::string* release_txt();
  void set_allocated_txt(::std::string* txt);

  // @@protoc_insertion_point(class_scope:map_segment.map.msg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr txt_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_map_5fsegment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class map : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map_segment.map) */ {
 public:
  map();
  virtual ~map();

  map(const map& from);

  inline map& operator=(const map& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  map(map&& from) noexcept
    : map() {
    *this = ::std::move(from);
  }

  inline map& operator=(map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const map* internal_default_instance() {
    return reinterpret_cast<const map*>(
               &_map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(map* other);
  friend void swap(map& a, map& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline map* New() const final {
    return CreateMaybeMessage<map>(NULL);
  }

  map* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<map>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const map& from);
  void MergeFrom(const map& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef map_keyframe keyframe;
  typedef map_edge edge;
  typedef map_landmark landmark;
  typedef map_Mat44 Mat44;
  typedef map_msg msg;

  // accessors -------------------------------------------------------

  // repeated .map_segment.map.keyframe keyframes = 2;
  int keyframes_size() const;
  void clear_keyframes();
  static const int kKeyframesFieldNumber = 2;
  ::map_segment::map_keyframe* mutable_keyframes(int index);
  ::google::protobuf::RepeatedPtrField< ::map_segment::map_keyframe >*
      mutable_keyframes();
  const ::map_segment::map_keyframe& keyframes(int index) const;
  ::map_segment::map_keyframe* add_keyframes();
  const ::google::protobuf::RepeatedPtrField< ::map_segment::map_keyframe >&
      keyframes() const;

  // repeated .map_segment.map.edge edges = 3;
  int edges_size() const;
  void clear_edges();
  static const int kEdgesFieldNumber = 3;
  ::map_segment::map_edge* mutable_edges(int index);
  ::google::protobuf::RepeatedPtrField< ::map_segment::map_edge >*
      mutable_edges();
  const ::map_segment::map_edge& edges(int index) const;
  ::map_segment::map_edge* add_edges();
  const ::google::protobuf::RepeatedPtrField< ::map_segment::map_edge >&
      edges() const;

  // repeated .map_segment.map.landmark landmarks = 4;
  int landmarks_size() const;
  void clear_landmarks();
  static const int kLandmarksFieldNumber = 4;
  ::map_segment::map_landmark* mutable_landmarks(int index);
  ::google::protobuf::RepeatedPtrField< ::map_segment::map_landmark >*
      mutable_landmarks();
  const ::map_segment::map_landmark& landmarks(int index) const;
  ::map_segment::map_landmark* add_landmarks();
  const ::google::protobuf::RepeatedPtrField< ::map_segment::map_landmark >&
      landmarks() const;

  // repeated uint32 local_landmarks = 5;
  int local_landmarks_size() const;
  void clear_local_landmarks();
  static const int kLocalLandmarksFieldNumber = 5;
  ::google::protobuf::uint32 local_landmarks(int index) const;
  void set_local_landmarks(int index, ::google::protobuf::uint32 value);
  void add_local_landmarks(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      local_landmarks() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_local_landmarks();

  // repeated .map_segment.map.msg messages = 6;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 6;
  ::map_segment::map_msg* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::map_segment::map_msg >*
      mutable_messages();
  const ::map_segment::map_msg& messages(int index) const;
  ::map_segment::map_msg* add_messages();
  const ::google::protobuf::RepeatedPtrField< ::map_segment::map_msg >&
      messages() const;

  // .map_segment.map.Mat44 current_frame = 1;
  bool has_current_frame() const;
  void clear_current_frame();
  static const int kCurrentFrameFieldNumber = 1;
  private:
  const ::map_segment::map_Mat44& _internal_current_frame() const;
  public:
  const ::map_segment::map_Mat44& current_frame() const;
  ::map_segment::map_Mat44* release_current_frame();
  ::map_segment::map_Mat44* mutable_current_frame();
  void set_allocated_current_frame(::map_segment::map_Mat44* current_frame);

  // @@protoc_insertion_point(class_scope:map_segment.map)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::map_segment::map_keyframe > keyframes_;
  ::google::protobuf::RepeatedPtrField< ::map_segment::map_edge > edges_;
  ::google::protobuf::RepeatedPtrField< ::map_segment::map_landmark > landmarks_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > local_landmarks_;
  mutable int _local_landmarks_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::map_segment::map_msg > messages_;
  ::map_segment::map_Mat44* current_frame_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_map_5fsegment_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// map_keyframe

// uint32 id = 1;
inline void map_keyframe::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 map_keyframe::id() const {
  // @@protoc_insertion_point(field_get:map_segment.map.keyframe.id)
  return id_;
}
inline void map_keyframe::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.keyframe.id)
}

// .map_segment.map.Mat44 pose = 2;
inline bool map_keyframe::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline void map_keyframe::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
inline const ::map_segment::map_Mat44& map_keyframe::_internal_pose() const {
  return *pose_;
}
inline const ::map_segment::map_Mat44& map_keyframe::pose() const {
  const ::map_segment::map_Mat44* p = pose_;
  // @@protoc_insertion_point(field_get:map_segment.map.keyframe.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::map_segment::map_Mat44*>(
      &::map_segment::_map_Mat44_default_instance_);
}
inline ::map_segment::map_Mat44* map_keyframe::release_pose() {
  // @@protoc_insertion_point(field_release:map_segment.map.keyframe.pose)
  
  ::map_segment::map_Mat44* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::map_segment::map_Mat44* map_keyframe::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::map_segment::map_Mat44>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:map_segment.map.keyframe.pose)
  return pose_;
}
inline void map_keyframe::set_allocated_pose(::map_segment::map_Mat44* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pose_;
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:map_segment.map.keyframe.pose)
}

// -------------------------------------------------------------------

// map_edge

// uint32 id0 = 1;
inline void map_edge::clear_id0() {
  id0_ = 0u;
}
inline ::google::protobuf::uint32 map_edge::id0() const {
  // @@protoc_insertion_point(field_get:map_segment.map.edge.id0)
  return id0_;
}
inline void map_edge::set_id0(::google::protobuf::uint32 value) {
  
  id0_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.edge.id0)
}

// uint32 id1 = 2;
inline void map_edge::clear_id1() {
  id1_ = 0u;
}
inline ::google::protobuf::uint32 map_edge::id1() const {
  // @@protoc_insertion_point(field_get:map_segment.map.edge.id1)
  return id1_;
}
inline void map_edge::set_id1(::google::protobuf::uint32 value) {
  
  id1_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.edge.id1)
}

// -------------------------------------------------------------------

// map_landmark

// uint32 id = 1;
inline void map_landmark::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 map_landmark::id() const {
  // @@protoc_insertion_point(field_get:map_segment.map.landmark.id)
  return id_;
}
inline void map_landmark::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:map_segment.map.landmark.id)
}

// repeated double coords = 2;
inline int map_landmark::coords_size() const {
  return coords_.size();
}
inline void map_landmark::clear_coords() {
  coords_.Clear();
}
inline double map_landmark::coords(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.landmark.coords)
  return coords_.Get(index);
}
inline void map_landmark::set_coords(int index, double value) {
  coords_.Set(index, value);
  // @@protoc_insertion_point(field_set:map_segment.map.landmark.coords)
}
inline void map_landmark::add_coords(double value) {
  coords_.Add(value);
  // @@protoc_insertion_point(field_add:map_segment.map.landmark.coords)
}
inline const ::google::protobuf::RepeatedField< double >&
map_landmark::coords() const {
  // @@protoc_insertion_point(field_list:map_segment.map.landmark.coords)
  return coords_;
}
inline ::google::protobuf::RepeatedField< double >*
map_landmark::mutable_coords() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.landmark.coords)
  return &coords_;
}

// repeated double color = 3;
inline int map_landmark::color_size() const {
  return color_.size();
}
inline void map_landmark::clear_color() {
  color_.Clear();
}
inline double map_landmark::color(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.landmark.color)
  return color_.Get(index);
}
inline void map_landmark::set_color(int index, double value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:map_segment.map.landmark.color)
}
inline void map_landmark::add_color(double value) {
  color_.Add(value);
  // @@protoc_insertion_point(field_add:map_segment.map.landmark.color)
}
inline const ::google::protobuf::RepeatedField< double >&
map_landmark::color() const {
  // @@protoc_insertion_point(field_list:map_segment.map.landmark.color)
  return color_;
}
inline ::google::protobuf::RepeatedField< double >*
map_landmark::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.landmark.color)
  return &color_;
}

// -------------------------------------------------------------------

// map_Mat44

// repeated double pose = 1;
inline int map_Mat44::pose_size() const {
  return pose_.size();
}
inline void map_Mat44::clear_pose() {
  pose_.Clear();
}
inline double map_Mat44::pose(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.Mat44.pose)
  return pose_.Get(index);
}
inline void map_Mat44::set_pose(int index, double value) {
  pose_.Set(index, value);
  // @@protoc_insertion_point(field_set:map_segment.map.Mat44.pose)
}
inline void map_Mat44::add_pose(double value) {
  pose_.Add(value);
  // @@protoc_insertion_point(field_add:map_segment.map.Mat44.pose)
}
inline const ::google::protobuf::RepeatedField< double >&
map_Mat44::pose() const {
  // @@protoc_insertion_point(field_list:map_segment.map.Mat44.pose)
  return pose_;
}
inline ::google::protobuf::RepeatedField< double >*
map_Mat44::mutable_pose() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.Mat44.pose)
  return &pose_;
}

// -------------------------------------------------------------------

// map_msg

// string tag = 1;
inline void map_msg::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& map_msg::tag() const {
  // @@protoc_insertion_point(field_get:map_segment.map.msg.tag)
  return tag_.GetNoArena();
}
inline void map_msg::set_tag(const ::std::string& value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:map_segment.map.msg.tag)
}
#if LANG_CXX11
inline void map_msg::set_tag(::std::string&& value) {
  
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:map_segment.map.msg.tag)
}
#endif
inline void map_msg::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:map_segment.map.msg.tag)
}
inline void map_msg::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:map_segment.map.msg.tag)
}
inline ::std::string* map_msg::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:map_segment.map.msg.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* map_msg::release_tag() {
  // @@protoc_insertion_point(field_release:map_segment.map.msg.tag)
  
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void map_msg::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:map_segment.map.msg.tag)
}

// string txt = 2;
inline void map_msg::clear_txt() {
  txt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& map_msg::txt() const {
  // @@protoc_insertion_point(field_get:map_segment.map.msg.txt)
  return txt_.GetNoArena();
}
inline void map_msg::set_txt(const ::std::string& value) {
  
  txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:map_segment.map.msg.txt)
}
#if LANG_CXX11
inline void map_msg::set_txt(::std::string&& value) {
  
  txt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:map_segment.map.msg.txt)
}
#endif
inline void map_msg::set_txt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:map_segment.map.msg.txt)
}
inline void map_msg::set_txt(const char* value, size_t size) {
  
  txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:map_segment.map.msg.txt)
}
inline ::std::string* map_msg::mutable_txt() {
  
  // @@protoc_insertion_point(field_mutable:map_segment.map.msg.txt)
  return txt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* map_msg::release_txt() {
  // @@protoc_insertion_point(field_release:map_segment.map.msg.txt)
  
  return txt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void map_msg::set_allocated_txt(::std::string* txt) {
  if (txt != NULL) {
    
  } else {
    
  }
  txt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txt);
  // @@protoc_insertion_point(field_set_allocated:map_segment.map.msg.txt)
}

// -------------------------------------------------------------------

// map

// .map_segment.map.Mat44 current_frame = 1;
inline bool map::has_current_frame() const {
  return this != internal_default_instance() && current_frame_ != NULL;
}
inline void map::clear_current_frame() {
  if (GetArenaNoVirtual() == NULL && current_frame_ != NULL) {
    delete current_frame_;
  }
  current_frame_ = NULL;
}
inline const ::map_segment::map_Mat44& map::_internal_current_frame() const {
  return *current_frame_;
}
inline const ::map_segment::map_Mat44& map::current_frame() const {
  const ::map_segment::map_Mat44* p = current_frame_;
  // @@protoc_insertion_point(field_get:map_segment.map.current_frame)
  return p != NULL ? *p : *reinterpret_cast<const ::map_segment::map_Mat44*>(
      &::map_segment::_map_Mat44_default_instance_);
}
inline ::map_segment::map_Mat44* map::release_current_frame() {
  // @@protoc_insertion_point(field_release:map_segment.map.current_frame)
  
  ::map_segment::map_Mat44* temp = current_frame_;
  current_frame_ = NULL;
  return temp;
}
inline ::map_segment::map_Mat44* map::mutable_current_frame() {
  
  if (current_frame_ == NULL) {
    auto* p = CreateMaybeMessage<::map_segment::map_Mat44>(GetArenaNoVirtual());
    current_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:map_segment.map.current_frame)
  return current_frame_;
}
inline void map::set_allocated_current_frame(::map_segment::map_Mat44* current_frame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete current_frame_;
  }
  if (current_frame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      current_frame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, current_frame, submessage_arena);
    }
    
  } else {
    
  }
  current_frame_ = current_frame;
  // @@protoc_insertion_point(field_set_allocated:map_segment.map.current_frame)
}

// repeated .map_segment.map.keyframe keyframes = 2;
inline int map::keyframes_size() const {
  return keyframes_.size();
}
inline void map::clear_keyframes() {
  keyframes_.Clear();
}
inline ::map_segment::map_keyframe* map::mutable_keyframes(int index) {
  // @@protoc_insertion_point(field_mutable:map_segment.map.keyframes)
  return keyframes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::map_segment::map_keyframe >*
map::mutable_keyframes() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.keyframes)
  return &keyframes_;
}
inline const ::map_segment::map_keyframe& map::keyframes(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.keyframes)
  return keyframes_.Get(index);
}
inline ::map_segment::map_keyframe* map::add_keyframes() {
  // @@protoc_insertion_point(field_add:map_segment.map.keyframes)
  return keyframes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::map_segment::map_keyframe >&
map::keyframes() const {
  // @@protoc_insertion_point(field_list:map_segment.map.keyframes)
  return keyframes_;
}

// repeated .map_segment.map.edge edges = 3;
inline int map::edges_size() const {
  return edges_.size();
}
inline void map::clear_edges() {
  edges_.Clear();
}
inline ::map_segment::map_edge* map::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:map_segment.map.edges)
  return edges_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::map_segment::map_edge >*
map::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.edges)
  return &edges_;
}
inline const ::map_segment::map_edge& map::edges(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.edges)
  return edges_.Get(index);
}
inline ::map_segment::map_edge* map::add_edges() {
  // @@protoc_insertion_point(field_add:map_segment.map.edges)
  return edges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::map_segment::map_edge >&
map::edges() const {
  // @@protoc_insertion_point(field_list:map_segment.map.edges)
  return edges_;
}

// repeated .map_segment.map.landmark landmarks = 4;
inline int map::landmarks_size() const {
  return landmarks_.size();
}
inline void map::clear_landmarks() {
  landmarks_.Clear();
}
inline ::map_segment::map_landmark* map::mutable_landmarks(int index) {
  // @@protoc_insertion_point(field_mutable:map_segment.map.landmarks)
  return landmarks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::map_segment::map_landmark >*
map::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.landmarks)
  return &landmarks_;
}
inline const ::map_segment::map_landmark& map::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.landmarks)
  return landmarks_.Get(index);
}
inline ::map_segment::map_landmark* map::add_landmarks() {
  // @@protoc_insertion_point(field_add:map_segment.map.landmarks)
  return landmarks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::map_segment::map_landmark >&
map::landmarks() const {
  // @@protoc_insertion_point(field_list:map_segment.map.landmarks)
  return landmarks_;
}

// repeated uint32 local_landmarks = 5;
inline int map::local_landmarks_size() const {
  return local_landmarks_.size();
}
inline void map::clear_local_landmarks() {
  local_landmarks_.Clear();
}
inline ::google::protobuf::uint32 map::local_landmarks(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.local_landmarks)
  return local_landmarks_.Get(index);
}
inline void map::set_local_landmarks(int index, ::google::protobuf::uint32 value) {
  local_landmarks_.Set(index, value);
  // @@protoc_insertion_point(field_set:map_segment.map.local_landmarks)
}
inline void map::add_local_landmarks(::google::protobuf::uint32 value) {
  local_landmarks_.Add(value);
  // @@protoc_insertion_point(field_add:map_segment.map.local_landmarks)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
map::local_landmarks() const {
  // @@protoc_insertion_point(field_list:map_segment.map.local_landmarks)
  return local_landmarks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
map::mutable_local_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.local_landmarks)
  return &local_landmarks_;
}

// repeated .map_segment.map.msg messages = 6;
inline int map::messages_size() const {
  return messages_.size();
}
inline void map::clear_messages() {
  messages_.Clear();
}
inline ::map_segment::map_msg* map::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:map_segment.map.messages)
  return messages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::map_segment::map_msg >*
map::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:map_segment.map.messages)
  return &messages_;
}
inline const ::map_segment::map_msg& map::messages(int index) const {
  // @@protoc_insertion_point(field_get:map_segment.map.messages)
  return messages_.Get(index);
}
inline ::map_segment::map_msg* map::add_messages() {
  // @@protoc_insertion_point(field_add:map_segment.map.messages)
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::map_segment::map_msg >&
map::messages() const {
  // @@protoc_insertion_point(field_list:map_segment.map.messages)
  return messages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace map_segment

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_map_5fsegment_2eproto
